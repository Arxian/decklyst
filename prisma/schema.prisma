// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Tournament {
  id     String   @id @default(cuid())
  name   String
  slug   String   @unique
  format String
  date   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  results TournamentResult[]
}

model TournamentResult {
  id         String @id @default(cuid())
  place      Int
  playerName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  deckId       String     @db.Uuid
  deck         Decklyst   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  playerId     String?
  player       User?      @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model Decklyst {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sharecode          String     @unique
  deckcode           String
  deckcodeNormalized String
  title              String
  privacy            Privacy    @default(unlisted)
  version            Int        @default(1)
  draft              Boolean    @default(false)
  archetype          Archetype?
  tags               String[]   @default([])

  views Int @default(0)
  likes Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  authorId          String?
  author            User?              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  statsId           Int                @unique
  stats             DeckStats          @relation(fields: [statsId], references: [id], onDelete: Cascade)
  history           DeckHistory[]
  viewers           DeckView[]
  image             DeckImage?
  tournamentResults TournamentResult[]

  @@index([deckcode], name: "deck_deckcode")
  @@map("deck")
}

enum Privacy {
  private
  unlisted
  public
}

enum Archetype {
  aggro
  midrange
  control
  combo
}

model DeckHistory {
  deckId   String   @db.Uuid
  version  Int
  deckcode String
  deck     Decklyst @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@id([deckId, version])
  @@map("deckhistory")
}

model DeckView {
  id        Int    @id @default(autoincrement())
  sharecode String
  ipAddress String @default("")
  userId    String @default("")
  views     Int    @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  decklyst Decklyst @relation(fields: [sharecode], references: [sharecode], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id])

  @@unique([sharecode, ipAddress, userId])
  @@map("deckview")
}

model DeckStats {
  id            Int    @id @default(autoincrement())
  faction       String @default("neutral")
  minionCount   Int    @default(0)
  spellCount    Int    @default(0)
  artifactCount Int    @default(0)
  totalCount    Int    @default(0)
  spiritCost    Int    @default(0)
  cardCounts    Json

  deck Decklyst?

  @@map("deckstats")
}

model DeckImage {
  sharecode       String    @id
  deckcode        String
  version         String?
  bytes           Bytes?
  renderStartedAt DateTime?
  renderedAt      DateTime?

  decklyst Decklyst @relation(fields: [sharecode], references: [sharecode], onDelete: Cascade)

  @@map("deckImage")
}

//* NEXT AUTH *//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  duelystUsername   String?
  accounts          Account[]
  sessions          Session[]
  decklysts         Decklyst[]
  deckviews         DeckView[]
  tournamentResults TournamentResult[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
